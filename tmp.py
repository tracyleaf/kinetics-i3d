# -*-coding:utf-8-*-
import os
import shutil
import tensorflow as tf
import cv2
# file = os.listdir('E:/dataset/instruments_video/kugou_mv_dataset_part_v1/CutVideo_output/06/test')
# file2 = os.listdir('E:/open Source/kinetics-i3d/kinetics-i3d/preprocess/data/flow/06/test')
#
# # for i in file:
# #      if i[:-4] not in file1:
# #              list2.append[i]
#
# list1 = [i[:-4] for i in file]
# list2 = [i[:-4] for i in file2]
# list3 = [i for i in list1 if i not in list2]
# print(list3)
# print(len(list3))

# list4 = ['868900865_1549_part_3', '868900865_1549_part_4', '868900865_1549_part_5', '868900865_1549_part_6', '868900865_1549_part_7', '868900865_1549_part_8', '868900865_1549_part_9', '869153222_31_part_0', '869153222_31_part_1', '869153222_31_part_10', '869153222_31_part_11', '869153222_31_part_12', '869153222_31_part_13', '869153222_31_part_14', '869153222_31_part_15', '869153222_31_part_16', '869153222_31_part_17', '869153222_31_part_18', '869153222_31_part_2', '869153222_31_part_3', '869153222_31_part_4', '869153222_31_part_5', '869153222_31_part_6', '869153222_31_part_7', '869153222_31_part_8', '869153222_31_part_9', '883903434_154_part_0', '883903434_154_part_1', '883903434_154_part_10', '883903434_154_part_2', '883903434_154_part_3', '883903434_154_part_4', '883903434_154_part_5', '883903434_154_part_6', '883903434_154_part_7', '883903434_154_part_8', '883903434_154_part_9', '89356062_3984_part_1', '89356062_3984_part_10', '89356062_3984_part_11', '89356062_3984_part_12', '89356062_3984_part_13', '89356062_3984_part_14', '89356062_3984_part_15']
# print(len(list4))

# f = open('UCF101-label.txt','a')
# for i in os.listdir('./UCF101'):
#     f.write(i)
# f.close()

# f1 = open('C:/Users/aiyanye/Desktop/tmp_nan5.txt')
# f2 = open('E:/open Source/kinetics-i3d/kinetics-i3d/preprocess/data/train_test_label/train_videoImage_list_v5.txt')
# l1 = [i for i in f1.readlines()]
# l2 = [i for i in f2.readlines()]
# l3 = [i for i in l1 if i not in l2]
# print(l3)
# print(len(l3))

#
# batch =  ['/02/train/24881317_114_part_3', '/03/train/24881317_19_part_1', '/04/train/987893423_1795_part_10', '/09/train/577220551_28483_part_1', '/01/train/443661357_15771_part_13', '/01/train/740066596_238_part_7', '/00/train/564129820_20060_part_4', '/04/train/496678133_19459_part_9']


# f1 = open('C:/Users/aiyanye/Desktop/tmplog7.txt')
# f2 = open('C:/Users/aiyanye/Desktop/tmp_nan.txt','wb')
# count = 0
# for i in f1.readlines():
#     if 'preprocess' in i:
#         tmp = i.split(' ')
#
#         f2.write(tmp[0][20:-4] + ',' + tmp[1])
#         print(tmp[0][20:-4])
#         count += 1
# print(count)
# f1.close()
# f2.close()
# DATA_DIR =  'E:/dataset/instruments_video/kugou_mv_dataset_part_v1/CutVideo_output'
# DATA_DIR = 'E:/open Source/kinetics-i3d/kinetics-i3d/preprocess/data/nan'
# # file = os.listdir('E:/dataset/instruments_video/kugou_mv_dataset_part_v1/CutVideo_output/')
# file2 = os.listdir('E:/open Source/kinetics-i3d/kinetics-i3d/preprocess/data/nan')
# # f2 = open('preprocess/data/train_test_label/train_videoImage_list_v5.txt')
# f2 = open('C:/Users/aiyanye/Desktop/rgb-1.txt')
# list2 = [i for i in f2.readlines()]
# list1 = [i[:-4] for i in file]
# list2 = [i[:-4] for i in file2]

# filenames = ['/'+ class_fold + "/" + 'train'+ "/" + filename[:-4] + ',' + class_fold[1]+'\n'  # filename + "//"  + class_fold + "//" + train_or_test
#              for class_fold in
#                 os.listdir(DATA_DIR)
#              for filename in
#              # tf.gfile.Glob(os.path.join(class_fold, '*'))
#                os.listdir(DATA_DIR  + "//" + class_fold + "//" + 'train')
#              #  os.listdir(FLAGS.data_dir + "//" + '00' + "//" + train_or_test)
#              ]
# print(len(filenames))
# list3 = [i for i in list2 if i not in filenames ]
# print(list3)
# print(len(list3))
# print(list2[:3])
# print(len(list2))
# # f = open('C:/Users/aiyanye/Desktop/train_rgb.txt','wb')
# # for i in filenames:
# #     f.write(i)
# # f.close()

# findmissing files
# def missingfiles(data_info):
#     f = open(data_info)
#     train_info = list()
#     for line in f.readlines():
#         pathlist = line.strip().split(',')
#         pathdir = 'preprocess/data/rgb/'
#         path = str(pathlist[0])
#         videolabel = int(pathlist[1])
#         file = pathdir + path + '.npy'
#         if not os.path.exists(file):
#             train_info.append(pathlist[0])
#     f.close()
#     return train_info #[filename,label]
# test_path = 'E:/dataset/instruments_video/Video_8k_dataset/label_8k/video_8k_test_list_v3.txt'
# missingfile = missingfiles(test_path)
# print(missingfile)
# print(len(missingfile))

# 提取检测模型xml文件
# src = 'E:/dataset/instruments_video/self labeling video/part2'
# target = 'E:/dataset/instruments_video/self labeling video/part2-labeled'
#
# for fold in os.listdir(src):
#     srcdir = src + '/' + fold
#     targetdir = target + '/' + fold
#     if not tf.gfile.IsDirectory(targetdir):
#         tf.gfile.MakeDirs(targetdir)
#     for i in os.listdir(srcdir):
#         if '.xml' not in i:
#             if i[:-4] + '.xml' in os.listdir(srcdir):
#                 srcFile = os.path.join(srcdir, i)
#                 targetFile = os.path.join(targetdir, i)
#                 srcfile_xml = os.path.join(srcdir, i[:-4] + '.xml')
#                 targetFile_xml = os.path.join(targetdir, i[:-4] + '.xml')
#                 shutil.copy(srcFile, targetFile)
#                 shutil.copy(srcfile_xml, targetFile_xml)

# 输出混淆矩阵
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
import numpy as np

def batch2array(pathlist, rgb_or_flow):
    pathdir = _SAMPLE_PATHS[rgb_or_flow]
    path = str(pathlist[0])
    videolabel = int(pathlist[1])
    file = pathdir + path + '.npy'
    array = np.load(file) # (1, 15, 224, 224, 2)
    return array, videolabel

def split_data(data_info):
    f = open(data_info)
    train_info = list()
    for line in f.readlines():
        info = line.strip().split(',')
        assert(info[1])
        train_info.append(info)
    f.close()
    return train_info #[filename,label]

# index的顺序与test文件的顺序一致
# y_true = [8, 1, 6, 8, 8, 1, 0, 8, 1, 6, 1, 5, 1, 0, 8, 0, 6, 8, 8, 5, 1, 3, 8, 0, 1, 8, 0, 1, 8, 5, 0, 2, 8, 7, 8, 4, 1, 6, 0, 8, 8, 0, 3, 0, 1, 8, 3, 8, 8, 1, 0, 6, 4, 5, 5, 1, 0, 6, 1, 3, 4, 8, 5, 1, 3, 0, 0, 7, 0, 0, 8, 3, 4, 0, 8, 4, 0, 1, 3, 1, 1, 4, 1, 6, 1, 8, 5, 8, 0, 4, 1, 1, 8, 8, 1, 6, 1, 8, 6, 4, 5, 8, 6, 4, 6, 1, 3, 4, 8, 2, 1, 6, 0, 7, 8, 2, 1, 4, 5, 1, 0, 7, 7, 0, 1, 8, 6, 7, 3, 3, 8, 8, 5, 8, 8, 0, 0, 1, 0, 8, 8, 1, 2, 8, 1, 3, 0, 1, 6, 1, 1, 0, 1, 0, 8, 3, 6, 4, 8, 1, 8, 1, 3, 3, 5, 5, 1, 8, 8, 3, 1, 3, 5, 8, 1, 8, 7, 1, 0, 3, 5, 1, 8, 0, 0, 3, 5, 0, 8, 1, 6, 7, 2, 1, 6, 0, 1, 4, 1, 2, 2, 7, 1, 1, 8, 5, 8, 1, 3, 3, 3, 2, 6, 0, 5, 8, 4, 6, 8, 8, 7, 8, 1, 3, 8, 6, 0, 0, 1, 0, 0, 6, 6, 1, 6, 8, 4, 8, 0, 8, 5, 8, 8, 8, 8, 0, 8, 0, 0, 8, 3, 5, 2, 0, 6, 8, 8, 4, 5, 3, 1, 4, 8, 5, 6, 3, 4, 1, 3, 8, 3, 8, 8, 3, 0, 8, 1, 4, 3, 8, 6, 7, 6, 5, 1, 1, 8, 2, 8, 5, 8, 3, 0, 8, 3, 2, 8, 8, 8, 0, 6, 8, 8, 1, 1, 0, 4, 1, 1, 8, 6, 2, 6, 8, 1, 1, 8, 8, 2, 1, 1, 3, 6, 2, 8, 2, 1, 1, 0, 1, 0, 8, 1, 6, 0, 1, 1, 1, 4, 0, 1, 5, 8, 3, 4, 1, 8, 6, 8, 5, 0, 1, 5, 8, 8, 1, 3, 0, 6, 8, 5, 4, 0, 6, 1, 1, 3, 5, 8, 1, 8, 8, 0, 6, 0, 7, 0, 3, 0, 1, 3, 0, 0, 1, 8, 0, 3, 1, 8, 0, 7, 1, 0, 0, 0, 1, 2, 1, 8, 8, 1, 1, 5, 0, 0, 4, 1, 4, 1, 3, 6, 1, 6, 8, 0, 8, 6, 5, 6, 1, 1, 3, 0, 8, 6, 3, 0, 1, 8, 1, 7, 6, 0, 1, 3, 2, 6, 0, 7, 6, 6, 1, 0, 3, 6, 8, 8, 3, 8, 3, 0, 5, 8, 5, 0, 1, 0, 1, 0, 0, 8, 3, 7, 8, 1, 0, 0, 1, 1, 8, 2, 8, 7, 8, 8, 7, 8, 1, 1, 0, 5, 3, 4, 1, 1, 2, 6, 0, 5, 6, 3, 1, 8, 7, 0, 5, 1, 1, 5, 3, 8, 8, 1, 1, 1, 1, 8, 6, 8, 8, 8, 5, 8, 8, 6, 7, 5, 1, 3, 4, 0, 5, 8, 2, 0, 6, 0, 1, 5, 8, 1, 0, 0, 0, 8, 2, 5, 7, 1, 8, 4, 0, 0, 0, 6, 8, 3, 8, 2, 1, 3, 5, 2, 3, 7, 3, 6, 3, 4, 1, 5, 8, 3, 5, 8, 8, 8, 0, 6, 8, 1, 1, 0, 2, 6, 0, 8, 8, 5, 2, 8, 6, 2, 8, 3, 8, 7, 7, 1, 2, 8, 1, 6, 6, 1, 0, 8, 0, 3, 2, 8, 1, 1, 6, 2, 1, 6, 1, 0, 1, 8, 6, 3, 4, 0, 6, 2, 1, 5, 0, 6, 8, 4, 6, 0, 1, 8, 6, 5, 8, 1, 6, 1, 0, 3, 1, 0, 1, 8, 3, 5, 0, 1, 8, 8, 8, 0, 1, 3, 0, 8, 2, 6, 0, 7, 8, 8, 1, 3, 8, 8, 5, 8, 0, 4, 1, 8, 6, 1, 0, 5, 7, 1, 3, 5, 8, 3, 1, 5, 8, 6, 0, 1, 6, 8, 0, 0, 4, 4, 8, 0, 8, 1, 5, 6, 8, 1, 3, 1, 8, 6, 0, 2, 8, 1, 3, 4, 5, 1, 0, 3, 8, 1, 8, 5, 5, 4, 1, 8, 5, 8, 6, 0, 3, 5, 3, 8, 1, 6, 1, 6, 0, 0, 8, 8, 8, 0, 8, 2, 1, 7, 0, 5, 1, 3, 3, 4, 8, 1, 5, 3, 0, 8, 0, 8, 7, 8, 8, 8, 0, 3, 2, 5, 6, 0, 0, 2, 0, 8, 8, 0, 8, 5, 8, 1, 1, 1, 1, 5, 8, 2, 1, 2, 4, 0, 0, 3, 5]
# y_pred = [2, 1, 6, 8, 8, 1, 0, 8, 1, 6, 1, 5, 1, 0, 8, 0, 6, 8, 0, 5, 1, 1, 8, 0, 1, 8, 0, 1, 5, 5, 0, 2, 0, 7, 8, 4, 1, 6, 0, 8, 8, 0, 3, 8, 1, 8, 3, 8, 8, 1, 0, 6, 8, 5, 5, 1, 0, 6, 1, 3, 4, 8, 5, 1, 3, 1, 0, 7, 0, 0, 8, 8, 8, 0, 8, 8, 0, 1, 3, 1, 1, 4, 1, 6, 1, 8, 5, 8, 0, 8, 1, 1, 8, 8, 1, 6, 1, 8, 6, 3, 5, 8, 6, 8, 6, 1, 8, 4, 8, 2, 1, 6, 0, 0, 8, 2, 1, 4, 5, 1, 0, 7, 7, 0, 1, 8, 6, 7, 3, 3, 5, 0, 5, 8, 5, 0, 0, 1, 0, 5, 8, 1, 2, 5, 1, 3, 0, 1, 6, 1, 1, 0, 1, 0, 8, 3, 6, 4, 8, 1, 8, 1, 3, 3, 5, 5, 1, 8, 8, 3, 1, 3, 5, 5, 1, 8, 0, 1, 0, 3, 5, 1, 8, 0, 1, 3, 5, 0, 8, 1, 6, 7, 2, 1, 6, 0, 1, 3, 1, 2, 2, 7, 1, 1, 2, 5, 8, 1, 3, 3, 3, 2, 6, 0, 5, 8, 1, 6, 8, 8, 6, 8, 1, 3, 8, 6, 0, 0, 1, 0, 0, 6, 6, 1, 6, 8, 4, 5, 0, 8, 5, 8, 8, 8, 8, 0, 8, 0, 0, 8, 3, 5, 2, 0, 6, 8, 8, 4, 5, 3, 1, 4, 3, 5, 6, 3, 8, 1, 3, 8, 3, 8, 8, 3, 8, 8, 1, 4, 3, 8, 6, 8, 6, 5, 1, 1, 8, 2, 8, 5, 8, 3, 1, 8, 3, 2, 8, 8, 5, 0, 6, 8, 8, 1, 1, 0, 1, 1, 1, 8, 6, 2, 6, 6, 1, 1, 8, 3, 2, 1, 1, 3, 6, 2, 8, 2, 1, 1, 0, 1, 0, 8, 1, 6, 0, 1, 1, 1, 4, 0, 1, 5, 8, 3, 4, 1, 8, 6, 5, 5, 0, 1, 5, 8, 8, 1, 3, 0, 6, 8, 5, 4, 0, 6, 1, 1, 3, 5, 8, 1, 6, 8, 0, 6, 0, 7, 0, 3, 0, 1, 3, 8, 0, 1, 8, 8, 3, 1, 8, 0, 7, 1, 0, 0, 0, 1, 2, 1, 8, 8, 1, 1, 5, 1, 8, 8, 1, 4, 1, 3, 6, 1, 6, 8, 0, 0, 6, 5, 6, 1, 1, 3, 0, 8, 6, 3, 0, 1, 8, 1, 7, 6, 0, 1, 3, 2, 6, 0, 7, 6, 6, 1, 0, 3, 8, 8, 8, 3, 8, 8, 0, 5, 6, 5, 0, 1, 0, 1, 0, 8, 8, 3, 7, 8, 1, 0, 0, 1, 1, 8, 2, 8, 7, 6, 8, 7, 8, 1, 1, 0, 5, 3, 4, 1, 1, 2, 6, 0, 5, 6, 8, 1, 8, 7, 0, 5, 1, 1, 5, 3, 8, 8, 1, 1, 1, 1, 8, 6, 8, 8, 8, 5, 8, 8, 6, 7, 5, 1, 3, 8, 0, 5, 8, 2, 0, 6, 0, 1, 5, 8, 1, 0, 1, 0, 8, 2, 5, 7, 1, 8, 4, 0, 0, 0, 6, 8, 3, 8, 2, 1, 3, 5, 2, 3, 7, 3, 6, 8, 4, 1, 5, 8, 3, 5, 1, 8, 8, 0, 6, 8, 1, 1, 0, 2, 6, 0, 8, 5, 5, 2, 0, 6, 2, 8, 3, 8, 7, 7, 1, 2, 8, 1, 6, 6, 1, 0, 5, 0, 3, 2, 8, 1, 1, 6, 2, 1, 6, 1, 0, 1, 8, 6, 3, 4, 0, 6, 2, 1, 5, 0, 6, 8, 4, 6, 0, 1, 8, 6, 5, 5, 1, 6, 1, 0, 3, 1, 0, 1, 8, 3, 5, 8, 1, 8, 8, 8, 0, 1, 3, 0, 8, 2, 6, 0, 7, 8, 8, 1, 3, 8, 8, 5, 8, 0, 4, 1, 0, 6, 1, 0, 5, 7, 1, 3, 5, 8, 3, 1, 5, 8, 6, 0, 1, 6, 6, 0, 0, 4, 8, 0, 0, 8, 1, 5, 6, 8, 1, 3, 1, 8, 6, 0, 2, 8, 1, 3, 8, 5, 1, 0, 3, 8, 1, 8, 5, 5, 4, 1, 8, 5, 8, 6, 0, 3, 5, 3, 8, 1, 6, 1, 6, 0, 0, 8, 8, 8, 0, 8, 2, 1, 7, 0, 5, 1, 3, 3, 8, 8, 1, 5, 3, 0, 8, 0, 8, 7, 8, 8, 8, 0, 3, 2, 5, 6, 0, 0, 2, 0, 8, 8, 0, 8, 5, 8, 1, 1, 1, 1, 5, 8, 2, 1, 2, 4, 0, 0, 3, 5]
# y_pred_flow = [2, 1, 6, 8, 8, 1, 0, 8, 1, 6, 1, 5, 1, 0, 8, 0, 6, 8, 8, 5, 1, 1, 8, 0, 1, 8, 0, 1, 5, 5, 0, 2, 0, 7, 8, 4, 1, 6, 0, 8, 8, 0, 3, 8, 1, 8, 3, 1, 8, 1, 0, 6, 8, 5, 5, 6, 0, 6, 1, 3, 4, 8, 5, 1, 3, 5, 0, 7, 0, 0, 8, 8, 4, 0, 8, 8, 0, 1, 3, 1, 1, 4, 1, 6, 1, 8, 5, 2, 0, 8, 1, 1, 8, 8, 1, 6, 1, 4, 6, 3, 5, 8, 6, 8, 6, 1, 3, 4, 8, 2, 1, 6, 0, 6, 8, 2, 1, 4, 5, 1, 0, 7, 7, 0, 1, 8, 6, 7, 3, 3, 5, 0, 5, 8, 5, 0, 0, 1, 0, 8, 8, 1, 2, 5, 1, 3, 0, 1, 6, 1, 1, 0, 1, 8, 8, 3, 6, 4, 8, 1, 8, 1, 3, 3, 5, 5, 1, 8, 8, 3, 8, 3, 5, 5, 1, 4, 0, 1, 0, 3, 5, 1, 8, 0, 5, 3, 5, 0, 3, 1, 6, 7, 2, 1, 6, 0, 1, 3, 1, 2, 2, 7, 1, 1, 2, 5, 8, 1, 3, 3, 3, 2, 6, 0, 5, 8, 8, 6, 8, 8, 6, 8, 1, 3, 8, 6, 0, 0, 1, 8, 0, 6, 6, 1, 6, 8, 4, 5, 0, 8, 5, 8, 8, 8, 8, 0, 8, 0, 0, 8, 3, 5, 2, 0, 6, 8, 8, 4, 5, 3, 1, 4, 4, 5, 6, 3, 8, 1, 3, 8, 3, 8, 8, 3, 8, 0, 1, 4, 3, 8, 6, 6, 6, 5, 1, 1, 8, 2, 8, 5, 8, 3, 3, 8, 3, 2, 2, 8, 8, 0, 6, 8, 8, 1, 1, 0, 4, 1, 1, 8, 6, 2, 6, 6, 1, 1, 8, 3, 2, 1, 1, 3, 6, 2, 8, 2, 1, 1, 0, 1, 0, 8, 1, 6, 0, 1, 1, 1, 4, 0, 1, 5, 8, 3, 4, 1, 8, 6, 5, 5, 0, 8, 5, 8, 8, 1, 3, 0, 6, 8, 5, 4, 0, 6, 1, 1, 3, 5, 8, 1, 6, 8, 0, 6, 0, 7, 0, 4, 0, 8, 8, 8, 0, 1, 8, 8, 3, 1, 8, 0, 7, 5, 0, 0, 0, 1, 2, 1, 8, 8, 1, 1, 5, 5, 8, 8, 1, 4, 1, 3, 6, 1, 6, 2, 0, 0, 6, 5, 6, 1, 1, 3, 0, 8, 6, 3, 0, 5, 8, 1, 7, 6, 0, 1, 3, 2, 6, 0, 7, 6, 6, 1, 0, 3, 8, 8, 8, 3, 8, 3, 0, 5, 8, 5, 0, 1, 5, 1, 0, 8, 8, 3, 7, 8, 1, 0, 0, 1, 1, 8, 2, 8, 7, 8, 8, 7, 8, 1, 1, 0, 5, 3, 4, 1, 1, 2, 6, 0, 5, 6, 8, 1, 8, 7, 0, 5, 1, 1, 5, 3, 8, 8, 1, 1, 1, 1, 8, 6, 8, 8, 8, 5, 8, 8, 6, 7, 5, 1, 8, 8, 0, 5, 8, 2, 0, 6, 0, 1, 5, 8, 1, 0, 5, 0, 0, 2, 5, 7, 1, 0, 4, 0, 0, 0, 6, 8, 3, 8, 2, 1, 3, 5, 2, 3, 6, 3, 6, 8, 4, 1, 5, 8, 8, 5, 8, 8, 8, 0, 6, 8, 1, 1, 0, 2, 6, 0, 8, 5, 5, 2, 0, 6, 2, 8, 3, 8, 7, 7, 1, 2, 8, 1, 6, 6, 1, 0, 5, 0, 3, 2, 8, 1, 1, 6, 2, 1, 6, 1, 0, 1, 8, 6, 3, 4, 0, 6, 2, 1, 5, 0, 6, 8, 4, 6, 0, 1, 8, 6, 5, 8, 1, 6, 1, 0, 3, 1, 0, 1, 8, 3, 5, 0, 1, 8, 8, 8, 0, 1, 3, 0, 8, 2, 6, 5, 7, 8, 8, 1, 3, 8, 8, 5, 2, 0, 4, 1, 8, 6, 1, 0, 5, 7, 1, 3, 5, 8, 3, 1, 5, 8, 6, 0, 1, 6, 6, 8, 0, 4, 8, 0, 0, 8, 1, 5, 6, 8, 1, 3, 1, 8, 6, 0, 2, 8, 1, 3, 8, 5, 1, 0, 3, 8, 7, 8, 5, 5, 4, 6, 8, 5, 8, 6, 0, 3, 5, 3, 8, 1, 6, 1, 6, 0, 0, 8, 8, 8, 0, 8, 2, 1, 7, 0, 5, 1, 3, 3, 8, 8, 1, 1, 3, 0, 8, 0, 8, 7, 8, 8, 8, 0, 3, 8, 5, 6, 0, 0, 2, 0, 1, 8, 0, 8, 5, 3, 1, 1, 1, 1, 5, 3, 2, 1, 2, 4, 0, 0, 3, 5]
# y_pred_rgb = [8, 1, 6, 8, 8, 1, 0, 8, 1, 6, 1, 5, 1, 0, 8, 0, 6, 8, 0, 5, 1, 1, 8, 0, 1, 8, 0, 1, 5, 5, 0, 2, 0, 7, 8, 4, 1, 8, 0, 8, 8, 0, 3, 0, 1, 8, 3, 8, 8, 1, 0, 6, 8, 8, 5, 1, 0, 6, 1, 3, 4, 8, 5, 1, 3, 1, 0, 7, 0, 0, 8, 3, 8, 0, 8, 5, 0, 1, 3, 1, 1, 4, 1, 6, 1, 8, 5, 8, 0, 5, 1, 1, 8, 8, 1, 6, 1, 8, 6, 8, 5, 8, 6, 1, 6, 1, 8, 4, 8, 2, 1, 6, 0, 8, 8, 8, 1, 4, 5, 1, 0, 7, 7, 0, 1, 8, 6, 7, 8, 8, 5, 0, 5, 3, 5, 0, 0, 1, 0, 5, 8, 1, 2, 5, 8, 3, 0, 1, 6, 1, 1, 0, 1, 0, 8, 3, 6, 8, 8, 1, 8, 1, 3, 3, 5, 5, 1, 8, 8, 3, 1, 3, 5, 5, 1, 8, 7, 1, 0, 3, 5, 1, 8, 0, 1, 3, 5, 0, 8, 1, 6, 7, 2, 1, 6, 8, 1, 8, 1, 2, 8, 7, 1, 1, 8, 5, 8, 1, 3, 3, 3, 2, 6, 0, 5, 8, 1, 6, 8, 8, 7, 8, 1, 3, 8, 6, 0, 0, 1, 0, 0, 6, 6, 1, 6, 8, 4, 5, 0, 8, 5, 8, 8, 8, 8, 0, 8, 0, 0, 8, 3, 5, 2, 0, 6, 8, 8, 4, 5, 3, 1, 4, 3, 8, 6, 3, 8, 1, 3, 8, 3, 8, 8, 3, 8, 8, 1, 4, 8, 8, 6, 7, 6, 5, 1, 1, 8, 2, 8, 5, 8, 3, 1, 8, 3, 8, 8, 8, 5, 0, 6, 8, 8, 1, 1, 8, 1, 1, 1, 8, 6, 2, 6, 6, 1, 1, 8, 3, 2, 1, 1, 3, 6, 2, 8, 2, 1, 8, 0, 1, 0, 8, 1, 6, 0, 8, 1, 1, 4, 0, 1, 5, 0, 3, 4, 1, 8, 6, 5, 5, 0, 1, 5, 8, 8, 1, 3, 0, 6, 8, 5, 4, 0, 6, 1, 8, 8, 5, 8, 1, 8, 8, 0, 6, 0, 7, 0, 3, 0, 1, 3, 8, 0, 1, 8, 8, 3, 1, 8, 0, 7, 1, 0, 0, 0, 1, 2, 1, 0, 8, 1, 1, 5, 1, 8, 8, 1, 4, 1, 3, 6, 1, 6, 8, 0, 8, 6, 5, 6, 1, 1, 3, 0, 8, 6, 3, 0, 1, 8, 1, 7, 6, 0, 1, 3, 2, 6, 0, 7, 6, 6, 1, 0, 3, 6, 8, 8, 3, 8, 8, 0, 5, 6, 5, 0, 1, 0, 1, 0, 8, 8, 3, 7, 8, 1, 0, 0, 1, 1, 8, 2, 8, 7, 6, 8, 7, 8, 1, 1, 0, 5, 3, 4, 1, 1, 2, 6, 0, 5, 6, 3, 1, 8, 7, 0, 5, 1, 1, 5, 3, 8, 8, 1, 1, 1, 1, 8, 6, 8, 3, 8, 5, 8, 8, 6, 7, 5, 1, 3, 8, 0, 8, 8, 2, 0, 6, 0, 1, 5, 8, 1, 0, 1, 0, 6, 8, 5, 7, 1, 8, 4, 0, 0, 0, 6, 8, 3, 8, 2, 1, 8, 5, 2, 3, 7, 8, 6, 3, 4, 1, 5, 8, 1, 5, 1, 8, 8, 0, 6, 8, 1, 1, 0, 2, 6, 0, 8, 5, 5, 2, 8, 6, 2, 8, 3, 8, 7, 7, 1, 2, 8, 1, 6, 6, 1, 0, 5, 0, 3, 2, 8, 1, 1, 6, 2, 1, 6, 1, 8, 1, 8, 6, 3, 4, 0, 6, 2, 1, 5, 0, 6, 8, 4, 6, 0, 1, 8, 6, 8, 5, 1, 6, 1, 0, 3, 1, 0, 1, 8, 3, 8, 8, 1, 8, 1, 8, 0, 1, 3, 0, 8, 2, 6, 0, 7, 8, 8, 1, 3, 8, 8, 5, 8, 0, 4, 3, 0, 6, 1, 0, 5, 7, 1, 3, 5, 8, 3, 1, 5, 8, 6, 0, 1, 6, 6, 0, 0, 4, 8, 8, 0, 8, 1, 5, 6, 8, 1, 3, 1, 8, 6, 0, 2, 8, 1, 3, 8, 5, 1, 0, 1, 8, 1, 8, 5, 5, 4, 1, 8, 5, 8, 6, 0, 3, 5, 3, 8, 1, 6, 1, 6, 0, 0, 8, 8, 8, 0, 0, 2, 1, 7, 0, 5, 1, 3, 3, 8, 8, 1, 5, 3, 0, 8, 0, 1, 7, 8, 8, 8, 0, 3, 2, 5, 8, 0, 0, 2, 0, 8, 8, 0, 8, 5, 8, 1, 1, 1, 1, 5, 8, 2, 1, 4, 4, 0, 0, 3, 5]

# y_true = [8, 1, 6, 8, 8, 1, 0, 8, 1, 6, 1, 5, 1, 0, 8, 0, 6, 8, 8, 5, 1, 3, 8, 0, 1, 8, 0, 1, 8, 5, 0, 2, 8, 7, 8, 4, 1, 6, 0, 8, 8, 0, 3, 0, 1, 8, 3, 8, 8, 1, 0, 6, 4, 5, 5, 1, 0, 6, 1, 3, 4, 8, 5, 1, 3, 0, 0, 7, 0, 0, 8, 3, 4, 0, 8, 4, 0, 1, 3, 1, 1, 4, 1, 6, 1, 8, 5, 8, 0, 4, 1, 1, 8, 8, 1, 6, 1, 8, 6, 4, 5, 8, 6, 4, 6, 1, 3, 4, 8, 2, 1, 6, 0, 7, 8, 2, 1, 4, 5, 1, 0, 7, 7, 0, 1, 8, 6, 7, 3, 3, 8, 8, 5, 8, 8, 0, 0, 1, 0, 8, 8, 1, 2, 8, 1, 3, 0, 1, 6, 1, 1, 0, 1, 0, 8, 3, 6, 4, 8, 1, 8, 1, 3, 3, 5, 5, 1, 8, 8, 3, 1, 3, 5, 8, 1, 8, 7, 1, 0, 3, 5, 1, 8, 0, 0, 3, 5, 0, 8, 1, 6, 7, 2, 1, 6, 0, 1, 4, 1, 2, 2, 7, 1, 1, 8, 5, 8, 1, 3, 3, 3, 2, 6, 0, 5, 8, 4, 6, 8, 8, 7, 8, 1, 3, 8, 6, 0, 0, 1, 0, 0, 6, 6, 1, 6, 8, 4, 8, 0, 8, 5, 8, 8, 8, 8, 0, 8, 0, 0, 8, 3, 5, 2, 0, 6, 8, 8, 4, 5, 3, 1, 4, 8, 5, 6, 3, 4, 1, 3, 8, 3, 8, 8, 3, 0, 8, 1, 4, 3, 8, 6, 7, 6, 5, 1, 1, 8, 2, 8, 5, 8, 3, 0, 8, 3, 2, 8, 8, 8, 0, 6, 8, 8, 1, 1, 0, 4, 1, 1, 8, 6, 2, 6, 8, 1, 1, 8, 8, 2, 1, 1, 3, 6, 2, 8, 2, 1, 1, 0, 1, 0, 8, 1, 6, 0, 1, 1, 1, 4, 0, 1, 5, 8, 3, 4, 1, 8, 6, 8, 5, 0, 1, 5, 8, 8, 1, 3, 0, 6, 8, 5, 4, 0, 6, 1, 1, 3, 5, 8, 1, 8, 8, 0, 6, 0, 7, 0, 3, 0, 1, 3, 0, 0, 1, 8, 0, 3, 1, 8, 0, 7, 1, 0, 0, 0, 1, 2, 1, 8, 8, 1, 1, 5, 0, 0, 4, 1, 4, 1, 3, 6, 1, 6, 8, 0, 8, 6, 5, 6, 1, 1, 3, 0, 8, 6, 3, 0, 1, 8, 1, 7, 6, 0, 1, 3, 2, 6, 0, 7, 6, 6, 1, 0, 3, 6, 8, 8, 3, 8, 3, 0, 5, 8, 5, 0, 1, 0, 1, 0, 0, 8, 3, 7, 8, 1, 0, 0, 1, 1, 8, 2, 8, 7, 8, 8, 7, 8, 1, 1, 0, 5, 3, 4, 1, 1, 2, 6, 0, 5, 6, 3, 1, 8, 7, 0, 5, 1, 1, 5, 3, 8, 8, 1, 1, 1, 1, 8, 6, 8, 8, 8, 5, 8, 8, 6, 7, 5, 1, 3, 4, 0, 5, 8, 2, 0, 6, 0, 1, 5, 8, 1, 0, 0, 0, 8, 2, 5, 7, 1, 8, 4, 0, 0, 0, 6, 8, 3, 8, 2, 1, 3, 5, 2, 3, 7, 3, 6, 3, 4, 1, 5, 8, 3, 5, 8, 8, 8, 0, 6, 8, 1, 1, 0, 2, 6, 0, 8, 8, 5, 2, 8, 6, 2, 8, 3, 8, 7, 7, 1, 2, 8, 1, 6, 6, 1, 0, 8, 0, 3, 2, 8, 1, 1, 6, 2, 1, 6, 1, 0, 1, 8, 6, 3, 4, 0, 6, 2, 1, 5, 0, 6, 8, 4, 6, 0, 1, 8, 6, 5, 8, 1, 6, 1, 0, 3, 1, 0, 1, 8, 3, 5, 0, 1, 8, 8, 8, 0, 1, 3, 0, 8, 2, 6, 0, 7, 8, 8, 1, 3, 8, 8, 5, 8, 0, 4, 1, 8, 6, 1, 0, 5, 7, 1, 3, 5, 8, 3, 1, 5, 8, 6, 0, 1, 6, 8, 0, 0, 4, 4, 8, 0, 8, 1, 5, 6, 8, 1, 3, 1, 8, 6, 0, 2, 8, 1, 3, 4, 5, 1, 0, 3, 8, 1, 8, 5, 5, 4, 1, 8, 5, 8, 6, 0, 3, 5, 3, 8, 1, 6, 1, 6, 0, 0, 8, 8, 8, 0, 8, 2, 1, 7, 0, 5, 1, 3, 3, 4, 8, 1, 5, 3, 0, 8, 0, 8, 7, 8, 8, 8, 0, 3, 2, 5, 6, 0, 0, 2, 0, 8, 8, 0, 8, 5, 8, 1, 1, 1, 1, 5, 8, 2, 1, 2, 4, 0, 0, 3, 5]
# y_pred = [2, 1, 6, 8, 8, 1, 0, 8, 1, 6, 1, 5, 1, 0, 8, 0, 8, 8, 8, 5, 1, 3, 8, 0, 1, 8, 0, 1, 5, 5, 0, 8, 0, 7, 8, 4, 1, 6, 0, 2, 8, 0, 3, 0, 1, 8, 3, 1, 8, 1, 0, 6, 8, 5, 5, 1, 0, 6, 1, 3, 4, 8, 5, 1, 3, 1, 0, 7, 0, 0, 8, 8, 4, 0, 8, 8, 0, 1, 3, 5, 1, 4, 1, 6, 1, 8, 5, 4, 0, 8, 1, 1, 8, 8, 1, 6, 1, 8, 6, 4, 5, 8, 6, 8, 6, 1, 6, 4, 8, 2, 1, 6, 0, 0, 8, 2, 1, 4, 5, 1, 0, 7, 7, 0, 1, 8, 6, 7, 8, 8, 5, 8, 5, 8, 5, 0, 0, 1, 0, 5, 8, 1, 6, 5, 1, 3, 0, 1, 6, 1, 1, 0, 1, 8, 8, 3, 6, 4, 8, 1, 8, 1, 3, 8, 5, 5, 1, 8, 8, 8, 1, 3, 5, 5, 1, 4, 0, 1, 0, 3, 5, 1, 8, 0, 3, 8, 5, 0, 8, 1, 6, 7, 3, 1, 6, 0, 1, 3, 1, 2, 4, 7, 1, 1, 2, 5, 8, 1, 3, 3, 3, 2, 6, 0, 5, 8, 4, 6, 8, 8, 0, 4, 1, 3, 4, 6, 0, 0, 1, 0, 0, 6, 6, 1, 6, 8, 4, 5, 0, 8, 5, 8, 8, 8, 8, 0, 8, 0, 0, 8, 3, 5, 2, 0, 6, 8, 8, 4, 5, 3, 1, 4, 3, 5, 6, 3, 8, 1, 3, 8, 3, 3, 8, 3, 8, 8, 1, 4, 3, 8, 6, 0, 6, 5, 1, 1, 8, 2, 8, 5, 8, 3, 1, 8, 3, 2, 8, 8, 8, 0, 6, 8, 8, 1, 1, 0, 8, 1, 1, 8, 6, 2, 6, 6, 1, 1, 8, 3, 2, 1, 1, 3, 6, 2, 8, 3, 1, 1, 0, 1, 0, 8, 1, 6, 0, 1, 1, 1, 4, 0, 1, 5, 8, 3, 4, 1, 8, 6, 5, 5, 0, 8, 5, 8, 8, 1, 3, 0, 6, 3, 5, 4, 0, 6, 1, 1, 3, 5, 8, 1, 0, 8, 0, 6, 0, 7, 0, 4, 0, 5, 8, 8, 0, 1, 8, 0, 3, 1, 8, 0, 7, 5, 0, 0, 0, 1, 2, 1, 8, 8, 1, 1, 5, 1, 8, 8, 1, 4, 1, 3, 6, 1, 6, 3, 0, 0, 6, 5, 6, 1, 1, 3, 0, 8, 6, 3, 0, 1, 8, 1, 7, 6, 0, 1, 3, 2, 6, 0, 7, 6, 6, 1, 0, 3, 8, 6, 8, 3, 8, 8, 0, 5, 8, 5, 0, 1, 0, 1, 0, 8, 8, 3, 7, 4, 1, 0, 0, 1, 1, 8, 2, 8, 7, 6, 8, 7, 8, 1, 1, 0, 5, 3, 4, 1, 1, 2, 6, 0, 5, 6, 3, 1, 8, 7, 0, 5, 1, 1, 5, 8, 8, 8, 1, 1, 1, 1, 8, 6, 8, 8, 8, 5, 8, 8, 6, 7, 5, 1, 4, 8, 0, 5, 8, 2, 0, 6, 0, 1, 5, 8, 1, 0, 1, 0, 8, 2, 5, 7, 1, 8, 4, 0, 0, 0, 6, 8, 3, 8, 2, 1, 3, 5, 2, 3, 0, 3, 6, 4, 4, 5, 5, 8, 3, 5, 8, 8, 8, 0, 0, 8, 1, 1, 0, 2, 6, 0, 8, 5, 5, 8, 0, 6, 2, 8, 3, 4, 7, 7, 1, 8, 8, 1, 6, 6, 1, 0, 5, 0, 3, 2, 8, 1, 1, 6, 2, 1, 6, 1, 0, 1, 8, 6, 3, 4, 0, 6, 2, 1, 5, 0, 6, 8, 4, 6, 0, 1, 2, 6, 5, 2, 1, 6, 1, 0, 3, 1, 0, 1, 0, 3, 5, 0, 1, 8, 8, 8, 0, 1, 3, 0, 8, 2, 6, 0, 7, 8, 8, 1, 3, 8, 8, 8, 2, 0, 4, 1, 0, 6, 1, 0, 5, 7, 1, 3, 5, 8, 3, 1, 5, 8, 6, 0, 1, 6, 6, 8, 0, 4, 4, 0, 0, 8, 1, 5, 6, 8, 1, 3, 1, 8, 6, 0, 2, 8, 1, 3, 8, 5, 1, 0, 3, 8, 4, 8, 5, 5, 4, 6, 8, 5, 8, 6, 0, 3, 5, 3, 8, 1, 6, 1, 6, 0, 0, 8, 8, 8, 0, 8, 2, 1, 4, 0, 5, 1, 3, 3, 8, 8, 1, 5, 3, 0, 8, 0, 8, 7, 8, 8, 4, 0, 3, 2, 5, 6, 0, 0, 2, 0, 8, 8, 0, 8, 5, 8, 1, 1, 1, 1, 5, 2, 2, 1, 2, 4, 0, 0, 3, 5]
y_true = [6, 0, 13, 14, 13, 14, 3, 13, 1, 13, 14, 4, 6, 13, 3, 6, 6, 13, 6, 13, 11, 0, 14, 0, 14, 13, 10, 2, 1, 4, 14, 0, 1, 14, 6, 13, 5, 7, 14, 3, 13, 5, 0, 1, 0, 13, 14, 1, 5, 14, 14, 14, 0, 13, 0, 2, 0, 0, 13, 14, 14, 13, 0, 3, 14, 14, 14, 6, 2, 0, 5, 13, 5, 14, 13, 14, 14, 1, 2, 14, 14, 5, 13, 3, 13, 1, 13, 2, 14, 14, 3, 3, 0, 0, 3, 14, 13, 2, 14, 0, 13, 14, 2, 14, 14, 14, 6, 1, 3, 13, 6, 13, 0, 1, 13, 13, 6, 1, 1, 1, 14, 13, 14, 14, 1, 14, 14, 1, 5, 0, 3, 1, 6, 13, 1, 13, 6, 1, 0, 5, 14, 14, 13, 14, 4, 14, 13, 5, 1, 2, 14, 1, 4, 1, 14, 2, 14, 7, 0, 0, 12, 1, 3, 1, 13, 13, 14, 14, 3, 7, 6, 0, 14, 5, 7, 14, 1, 14, 1, 13, 14, 1, 6, 0, 1, 14, 1, 13, 3, 6, 1, 1, 0, 14, 0, 1, 0, 6, 1, 2, 14, 13, 1, 3, 1, 1, 14, 4, 6, 6, 13, 7, 14, 14, 4, 1, 3, 1, 2, 1, 1, 1, 13, 8, 5, 0, 14, 1, 0, 14, 5, 0, 3, 14, 14, 13, 0, 4, 13, 6, 14, 13, 13, 6, 14, 12, 0, 0, 0, 2, 14, 1, 5, 14, 6, 1, 1, 0, 14, 14, 3, 0, 13, 3, 1, 13, 13, 1, 14, 13, 0, 3, 14, 6, 6, 0, 5, 10, 3, 1, 4, 3, 5, 6, 13, 3, 14, 1, 6, 13, 7, 1, 13, 9, 5, 13, 1, 14, 0, 1, 10, 1, 0, 14, 1, 14, 14, 1, 14, 0, 13, 13, 13, 0, 13, 13, 14, 14, 13, 1, 13, 6, 6, 1, 5, 13, 1, 14, 14, 14, 14, 14, 5, 0, 10, 14, 6, 14, 14, 14, 0, 4, 14, 13, 13, 13, 0, 6, 5, 14, 3, 14, 1, 14, 2, 14, 13, 4, 7, 13, 1, 0, 14, 1, 14, 13, 14, 14, 13, 13, 14, 13, 14, 5, 13, 2, 14, 7, 6, 0, 14, 13, 4, 0, 11, 6, 1, 1, 1, 3, 2, 8, 1, 2, 1, 1, 13, 1, 13, 4, 1, 13, 14, 13, 14, 3, 13, 1, 11, 5, 0, 4, 14, 13, 13, 1, 10, 0, 0, 0, 14, 6, 14, 13, 13, 1, 3, 7, 13, 2, 7, 13, 13, 1, 14, 7, 4, 7, 1, 0, 0, 3, 3, 14, 3, 1, 6, 1, 14, 1, 3, 0, 1, 0, 14, 2, 13, 5, 14, 2, 1, 14, 6, 3, 5, 14, 3, 13, 1, 14, 1, 13, 1, 5, 6, 13, 0, 0, 2, 5, 1, 14, 4, 14, 0, 1, 7, 6, 3, 10, 6, 14, 0, 14, 14, 4, 14, 14, 13, 3, 13, 0, 0, 13, 14, 14, 14, 14, 1, 14, 1, 14, 1, 5, 14, 2, 13, 14, 1, 6, 5, 13, 13, 2, 4, 1, 14, 0, 3, 0, 14, 1, 3, 4, 14, 5, 13, 1, 13, 1, 14, 1, 13, 13, 3, 6, 0, 1, 14, 4, 13, 14, 6, 13, 13, 14, 13, 10, 10, 14, 14, 1, 13, 13, 1, 14, 14, 4, 1, 14, 0, 13, 13, 5, 0, 13, 13, 13, 3, 14, 0, 14, 3, 0, 3, 14, 1, 14, 14, 13, 0, 0, 1, 5, 1, 3, 14, 13, 7, 13, 1, 13, 14, 14, 14, 1, 14, 6, 13, 13, 0, 13, 0, 13, 13, 3, 3, 13, 3, 0, 14, 14, 5, 13, 13, 1, 3, 11, 6, 13, 14, 14, 0, 5, 14, 6, 6, 6, 0, 0, 14, 0, 3, 13, 1, 1, 14, 13, 1, 13, 14, 5, 14, 1, 1, 14, 1, 6, 7, 13, 13, 13, 0, 13, 14, 13, 1, 13, 13, 9, 6, 4, 6, 1, 14, 14, 7, 13, 14, 13, 5, 7, 0, 1, 6, 6, 6, 1, 1, 13, 14, 1, 0, 14, 0, 0, 3, 1, 1, 3, 14, 5, 1, 13, 5, 14, 5, 5, 13, 13, 6, 1, 0, 14, 13, 13, 3, 7, 7, 14, 13, 4, 0, 13, 0, 2, 5, 1, 0, 0, 13, 14, 14, 5, 4, 5, 11, 1, 14, 3, 1, 1, 1, 13, 3, 5, 14, 1, 0, 14, 1, 1, 0, 13, 0, 14, 6, 14, 3, 7, 6, 9, 13, 4, 1, 6, 3, 14, 13, 14, 0, 6, 0, 6, 13, 1, 0, 14, 0, 14, 5, 3, 1, 0, 1, 14, 14, 7, 5, 14, 1, 7, 13, 3, 6, 5, 13, 3, 13, 0, 5, 13, 13, 13, 1, 0, 1, 13, 1, 3, 5, 4, 1, 1, 6, 1, 14, 14, 13, 1, 0, 14, 5, 3, 0, 13, 3, 0, 3, 14, 1, 14, 5, 1, 14, 0, 0, 14, 13, 2, 1, 3, 13, 1, 7, 1, 6, 6, 1, 14, 1, 13, 3, 1, 14, 1, 7, 7, 14, 14, 14, 10, 3, 14, 2, 0, 13, 14, 0, 3, 6, 4, 0, 5, 0, 14, 13, 14, 9, 13, 13, 13, 13, 14, 0, 1, 14, 13, 0, 14, 5, 5, 14, 14, 4, 2, 0, 4, 14, 13, 14, 14, 14, 5, 14, 1, 2, 1, 13, 5, 13, 1, 14, 2, 13, 13, 13, 14, 1, 0, 6, 14, 14, 1]
y_pred = [6, 0, 13, 14, 13, 14, 3, 13, 1, 13, 14, 4, 6, 13, 3, 6, 6, 13, 6, 13, 13, 0, 13, 0, 14, 13, 13, 2, 1, 12, 0, 0, 1, 14, 14, 13, 5, 7, 14, 3, 13, 5, 0, 1, 0, 13, 14, 1, 14, 14, 14, 14, 0, 13, 4, 2, 0, 0, 13, 14, 5, 13, 0, 3, 14, 14, 14, 6, 2, 0, 5, 13, 5, 14, 13, 14, 14, 1, 14, 14, 0, 5, 13, 3, 13, 1, 13, 2, 14, 14, 3, 3, 0, 0, 3, 14, 13, 2, 14, 0, 13, 14, 2, 5, 14, 14, 14, 1, 3, 13, 6, 13, 0, 1, 13, 13, 6, 1, 1, 1, 14, 13, 14, 14, 1, 14, 14, 1, 5, 0, 3, 14, 6, 13, 1, 13, 6, 1, 0, 5, 14, 14, 13, 14, 4, 14, 13, 5, 1, 2, 14, 1, 4, 1, 14, 2, 14, 7, 0, 0, 13, 1, 4, 1, 13, 13, 14, 5, 3, 14, 6, 0, 14, 5, 7, 14, 1, 14, 1, 13, 14, 1, 6, 0, 14, 14, 1, 13, 3, 6, 1, 1, 0, 5, 14, 1, 0, 6, 1, 2, 14, 13, 1, 3, 1, 14, 14, 4, 6, 6, 5, 7, 14, 14, 4, 1, 14, 1, 14, 1, 1, 1, 13, 13, 5, 0, 14, 1, 0, 14, 5, 0, 2, 14, 14, 13, 0, 14, 13, 6, 14, 13, 13, 6, 14, 13, 0, 0, 0, 2, 14, 1, 5, 14, 6, 1, 1, 0, 14, 14, 3, 0, 13, 3, 1, 13, 13, 1, 14, 13, 0, 3, 14, 6, 6, 0, 5, 13, 3, 1, 4, 3, 3, 14, 13, 3, 14, 1, 6, 13, 7, 1, 13, 14, 5, 13, 1, 14, 0, 1, 13, 1, 0, 14, 1, 14, 14, 1, 14, 0, 13, 13, 14, 0, 13, 13, 13, 14, 13, 1, 13, 6, 6, 1, 5, 13, 1, 14, 14, 14, 1, 14, 5, 14, 13, 14, 6, 14, 14, 14, 0, 4, 14, 13, 13, 13, 0, 6, 5, 13, 3, 5, 1, 14, 2, 14, 13, 4, 7, 13, 1, 0, 14, 1, 14, 13, 14, 14, 13, 13, 14, 13, 14, 5, 13, 2, 14, 14, 6, 0, 14, 13, 4, 0, 13, 6, 1, 1, 1, 3, 2, 13, 1, 2, 1, 1, 13, 1, 13, 4, 1, 13, 14, 13, 14, 3, 13, 1, 3, 3, 0, 4, 14, 3, 13, 1, 13, 0, 0, 0, 14, 6, 14, 13, 13, 1, 3, 7, 13, 2, 7, 13, 13, 1, 14, 7, 4, 0, 1, 0, 0, 0, 3, 14, 3, 1, 6, 1, 14, 14, 14, 0, 1, 0, 1, 2, 13, 5, 14, 1, 1, 14, 6, 3, 5, 14, 3, 13, 1, 14, 14, 13, 1, 5, 6, 13, 1, 0, 2, 5, 1, 14, 4, 14, 0, 1, 7, 6, 3, 13, 6, 14, 0, 14, 14, 3, 14, 14, 13, 3, 13, 0, 13, 13, 14, 14, 14, 14, 14, 2, 1, 14, 1, 5, 14, 2, 13, 13, 1, 6, 5, 13, 13, 13, 4, 1, 14, 0, 3, 0, 14, 1, 3, 3, 14, 5, 5, 1, 13, 1, 14, 1, 13, 13, 3, 6, 0, 1, 14, 4, 13, 14, 14, 13, 13, 14, 13, 13, 14, 14, 14, 1, 13, 13, 1, 14, 14, 4, 1, 14, 0, 13, 13, 5, 0, 13, 13, 13, 3, 14, 0, 6, 3, 0, 3, 14, 5, 14, 5, 13, 0, 0, 1, 5, 1, 3, 14, 13, 7, 13, 1, 13, 14, 14, 14, 1, 14, 6, 13, 13, 0, 13, 0, 13, 13, 3, 3, 13, 3, 0, 14, 14, 5, 13, 13, 1, 3, 1, 6, 13, 14, 14, 0, 5, 14, 6, 6, 6, 0, 0, 14, 3, 3, 13, 1, 1, 14, 13, 1, 13, 14, 5, 14, 1, 1, 14, 5, 6, 7, 13, 5, 13, 0, 13, 14, 13, 1, 13, 13, 13, 6, 3, 6, 1, 14, 14, 7, 13, 14, 3, 5, 7, 0, 1, 6, 6, 6, 1, 1, 13, 14, 1, 0, 14, 0, 0, 3, 1, 1, 3, 14, 5, 5, 13, 14, 14, 5, 14, 13, 13, 6, 14, 0, 14, 13, 13, 3, 7, 7, 14, 13, 4, 0, 13, 0, 2, 5, 1, 0, 0, 13, 14, 14, 5, 4, 5, 13, 1, 14, 3, 1, 1, 1, 13, 3, 5, 14, 1, 0, 14, 1, 1, 0, 13, 13, 14, 14, 14, 3, 0, 6, 13, 13, 4, 1, 6, 3, 14, 13, 14, 0, 6, 0, 6, 13, 1, 0, 14, 0, 14, 5, 3, 1, 0, 1, 14, 14, 7, 5, 14, 1, 7, 13, 3, 6, 5, 14, 3, 13, 0, 3, 13, 13, 13, 1, 0, 1, 13, 1, 3, 5, 4, 1, 1, 6, 1, 14, 14, 13, 1, 0, 0, 3, 3, 0, 13, 3, 0, 3, 14, 1, 6, 13, 1, 14, 0, 0, 14, 13, 2, 1, 3, 13, 1, 7, 1, 6, 6, 1, 14, 1, 13, 3, 1, 14, 1, 7, 7, 14, 14, 14, 13, 3, 14, 2, 0, 13, 14, 0, 3, 6, 4, 0, 5, 13, 14, 13, 14, 14, 13, 13, 13, 13, 0, 0, 1, 14, 13, 0, 14, 5, 5, 14, 14, 4, 2, 0, 4, 5, 13, 14, 14, 14, 5, 14, 1, 2, 1, 13, 5, 13, 1, 14, 2, 13, 13, 13, 14, 1, 0, 6, 14, 14, 1]

_SAMPLE_PATHS = {
   'rgb': 'preprocess/data/rgb/',  #'E:/dataset/instruments_video/UCF-101/',  # '24881317_23_part_6.npy', #'./24881317_23_part_6_rgb.npy',
   'flow': 'preprocess/data/flow/', #'E:/dataset/instruments_video/UCF-101/', #'preprocess/data/flow/24881317_23_part_6.npy',#v_BabyCrawling_g06_c05.npy',
}
error_path = 'preprocess/data/error'
test_path = 'E:/dataset/instruments_video/Video_9k_dataset_v3/label_9k/video_9k_test_list_v2.txt'
testpathlist = split_data(test_path)
# for i in range(len(y_pred)):
#     if y_true[i] != y_pred[i]:
#         pathlist = testpathlist[i]
#         path = str(pathlist[0])
#         videoarray, videolabel = batch2array(pathlist, 'rgb')
#         # windowtitle = '_label'+ str(videolabel)+ '_predict' + str(y_pred[i]) + '_rgb' + str(y_pred_rgb[i]) + '_flow' + str(y_pred_flow[i]) #path +
#         windowtitle = '_label' + str(videolabel) + '_predict' + str(y_pred[i])
#         cv2.namedWindow(windowtitle, cv2.WINDOW_NORMAL)
#         cv2.resizeWindow(windowtitle, 600, 600)
#         fourcc = cv2.VideoWriter_fourcc(*'XVID')
#         savepath = os.path.join(error_path, (path + windowtitle).split('/')[-1] + '.avi')
#         print(savepath)
#         out = cv2.VideoWriter(savepath, fourcc, 5, (224, 224))
#         for j in range(15):
#             # 定义解码器并创建VideoWrite对象
#             # linux: XVID、X264; windows:DIVX
#             # 20.0指定一分钟的帧数
#             # 写入帧
#             frame = videoarray[0][j]
#             frame = np.array((frame + 1)/2*255,dtype= np.uint8)
#             out.write(frame)
#             cv2.imshow(windowtitle, frame)
#
#             # cv2.waitKey(300)
#             if cv2.waitKey(10) & 0xFF == ord('q'):  # 适当调整等待时间
#                 continue
#         out.release()
#
# cv2.destroyAllWindows()


labels = ['钢琴','吉他','萨克斯','笛子','葫芦丝','架子鼓','古筝','二胡','琵琶','唢呐','单簧管','小提琴','埙','跳舞','非乐器']
print(confusion_matrix(
    y_true,   # array, Gound true (correct) target values
    y_pred,  # array, Estimated targets as returned by a classifier
    labels=None,  # array, List of labels to index the matrix.
    sample_weight=None  # array-like of shape = [n_samples], Optional sample weights
))

tick_marks = np.array(range(len(labels))) + 0.5
plt.rcParams['font.sans-serif']=['SimHei'] #用来正常显示中文标签
fontsize = 12
def plot_confusion_matrix(cm, title='Confusion Matrix', cmap=plt.cm.Blues): #plt.cm.binary
    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title, fontsize=22)
    plt.colorbar()
    xlocations = np.array(range(len(labels)))
    plt.xticks(xlocations, labels, rotation=90, fontsize=14)
    plt.yticks(xlocations, labels, fontsize=14)
    plt.ylabel('真实类别', fontsize=fontsize)
    plt.xlabel('预测类别', fontsize=fontsize)

cm = confusion_matrix(y_true, y_pred)
# np.set_printoptions(precision=2)
# cm_normalized = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
# print(cm_normalized)
plt.figure(figsize=(12, 8), dpi=120)

ind_array = np.arange(len(labels))
x, y = np.meshgrid(ind_array, ind_array)

for x_val, y_val in zip(x.flatten(), y.flatten()):
    # c = cm_normalized[y_val][x_val]
    c = cm[y_val][x_val]
    # if c > 0.01:
    if c>1:
        # plt.text(x_val, y_val, "%.1f%%" % (c*100,), color='red', fontsize=fontsize, va='center', ha='center')
        plt.text(x_val, y_val, c, color='red', fontsize=fontsize, va='center', ha='center')
# offset the tick
plt.gca().set_xticks(tick_marks, minor=True)
plt.gca().set_yticks(tick_marks, minor=True)
plt.gca().xaxis.set_ticks_position('none')
plt.gca().yaxis.set_ticks_position('none')
plt.grid(True, which='minor', linestyle='-')
plt.gcf().subplots_adjust(bottom=0.15)

plot_confusion_matrix(cm, title='乐器识别混淆矩阵') #cm_normalized
# show confusion matrix
# plt.savefig('../Data/confusion_matrix.png', format='png')
plt.show()